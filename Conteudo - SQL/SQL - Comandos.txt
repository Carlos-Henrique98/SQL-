==========================================
   	| SQL Server (T-SQL) |
==========================================
*SGBD(SQL STUDIO) - GERENCIA

*SQL SERVER - GUARDA (LOCAL)

*SSMS - Acessa os dados dos bancos(Gerencia)
------------------------------------------------
	    [ SGBDR ]

*Sistema Gerenciador de Banco de Dados
Relacional
*Trata-se de um sistema de gerenciamento
de bancos de dados baseado no modelo relacional
introduzido por E. F. Codd.

Composição de um Banco de Dados

*Tabelas;
*Campos(Colunas);
*Registros(Linhas);
------------------------------------------------
 - Tabelas

*Objetos onde são armazenados os dados em 
um banco de dados relacional

*Uma tabela é uma coleção de entradas de 
dados relacionados e consiste em linhas e 
colunas.
-----------------------------------------------
 - Campo

*São entidades que representam os atributos
dos dados, como Nome,Data de Nascimento,
Salário, Preco.

*Um campo é uma coluna em uma tabela que 
mantém informações especificas sobre cada
registro.
-----------------------------------------------
 - Registro

* Linha, ou Tupla

*Cada entrada individual em uma tabela. 
Trata-se de um conjunto de campos relacionados
que caracterizam os dados de uma entidade única.
------------------------------------------------
 - Criacao de um Banco de Dados

CREATE DATABASE db_Biblioteca
ON PRIMARY (NAME = db_Biblioteca,
FILENAME='C:\SQL\db_Biblioteca.MDF',
SIZE=6MB,
MAXSIZE =10MB,
FILEGROWTH=10%
)
------------------------------------------------
 - USE

*O comando USE instrui o SGBDR a utilizar o
banco de dados especificado para rodar os comandos

*Sintaxe:
USE banco_de_dados
--------------------------------------------------
 - sp_helpdb

 Informa o tamanho, taxa de crescimento, e o local
do banco de dados.

sp_helpdb NOME_BANCO_DADOS
--------------------------------------------------
 - SQL Constraints (Restrições)

*Restrições são regras aplicadas nas colunas de uma 
tabela.
*São usadas para limitar os tipos de dados que são
inseridos.
*Podem ser especificados no momento de criação da 
tabela (CREATE) ou após a tabela ter sido criada
(ALTER).

===================================================
	 - SQL Constraints (RESTRIÇÕES)
===================================================

Principais

*NOT NULL
*UNIQUE
*PRIMARY KEY
*FOREIGN KEY
*CHECK
*DEFAULT

===================================================
		   - NOT NULL
===================================================

* A constraint NOT NULL impõe a uma coluna a 
NÃO aceitar valores NULL.

* A constraint NOT NULL obriga um campo a sempre
possuir um valor.

* Deste modo, não é possivel inserir um registro
(ou atualizar) sem entrar com um valor neste campo.

====================================================
		  - UNIQUE
====================================================
*A restrição UNIQUE identifica de forma única cada
registro em uma tabela de um banco de dados

*As constraints UNIQUE e PRIMARY KEY garantem a unicidade
em uma coluna ou conjunto de colunas.

*Uma constraint PRIMARY KEY automaticamente possui uma 
restrição UNIQUE definida.

*Você pode ter várias constraints UNIQUE em uma tabela,
mas apenas uma Chave Primária por tabela.

======================================================
    		- PRIMARY KEY
======================================================

* A PRIMARY KEY identifica de forma única cada registro
em uma tabela de banco de dados.

* Chaves Primárias devem conter valores únicos.

* Uma coluna de chave primária não pode conter valores NULL.

* Cada tabela deve ter uma chave primária e apenas uma chave
primária. 

=======================================================
        	   - FOREIGN KEY
=======================================================

*Uma FOREIGN KEY (Chave Estrangeira) em uma tabela é um
campo que aponta para uma chave primária em outra tabela.

CONSTRAINT fk_ID_Autor FOREIGN KEY (ID_Autor) REFERENCES
tbl_autores(ID_Autor)

Neste exemplo a chave primária está na tabela tbl_autores
e uma chave estrangeira de nome ID_Autor foi criada na 
tabela atual, usando o nome fk_ID_Autor

========================================================
		    - CHECK
========================================================

*A constraint CHECK é usada para limitar uma faixa de 
valores que podem ser colocadas em uma coluna.

*Se uma constraint CHECK for definida em uma única coluna
ela permitirá apenas determinados valores para a coluna.

*Se a constraint CHECK for definida para a tabela, ela 
poderá limitar os valores em algumas colunas com base nos
valores de outras colunas do registro.

========================================================
		    - DEFAULT
=======================================================
* A restrição DEFAULT é usada para inserir um valor padrão
em uma coluna.
 
* O valor padrão será adicionado a todos os novos registros
caso nenhum outro valor seja especificado.

========================================================
		 - CRIAR TABELAS
========================================================

USE db_Biblioteca

CREATE TABLE tbl_Livro
(ID_Livro SMALLINT PRIMARY KEY IDENTITY(100,1),
Nome_Livro VARCHAR(50) NOT NULL,
ISBN VARCHAR(30) NOT NULL UNIQUE,
ID_Autor SMALLINT NOT NULL,
Data_Pub DATETIME NOT NULL,
Preco_Livro MONEY NOT NULL)

======================================================
		- sp_help TABELA
======================================================

*Informa os índices, chaves e campos, atributos tipos de 
atributos de uma tabela (stored procedures, comandos pré-
programados).

=======================================================
	 	- AUTO INCREMENT (IDENTITY)
=======================================================

* O auto incremento permite que um número único seja gerado
quando um novo registro é inserido em uma tabela.

* Em SQL SERVER trata-se da palavra chave IDENTITY (identidade),
cujo valor inicial padrão é 1, e se incrementa em 1.

* Para que o valor de IDENTITY inicie em 100 e se incremente
de 2 em 2, use IDENTITY(100,2).

========================================================
		- AUTO INCREMENT (IDENTITY)
========================================================

* Ao inserir valores na tabela, não é necessário especificar o
valor para a coluna de auto-incremento.

* Não é possivel alterar uma coluna existente para configurar
IDENTITY. 

* Se necessário, crie uma nova tabela com IDENTITY e exclua
a atual.

* Só é permitido usar uma coluna de identidade por tabela.

 - SINTAXE: 

CREATE TABLE tbl_teste_identidade
(ID_Teste SMALLINT PRIMARY KEY IDENTITY, 
valor SMALLINT NOT NULL)

INSERT INTO tbl_teste_identidade (valor) VALUES (10)
INSERT INTO tbl_teste_identidade (valor) VALUES (20)
INSERT INTO tbl_teste_identidade (valor) VALUES (30)
INSERT INTO tbl_teste_identidade (valor) VALUES (40)

SELECT * FROM tbl_teste_identidade 

===========================================================
		   - ALTERAR TABELAS
===========================================================

* É possivel alterar a estrutura de uma tabela após ter sido
criada, acrescentando ou excluindo atributos (campos). 

ALTER TABLE tbl_Livro
DROP COLUMN ID_Autor

Pode-se excluir uma constraint: 

ALTER TABLE tabela
DROP CONSTRAINT nome_constraint

--------------------
 - ALTER TABLE -ADD
--------------------

ALTER TABLE tbl_Livro
ADD ID_Autor SMALLINT NOT NULL
CONSTRAINT fk_ID_Autor FOREIGN KEY (ID_Autor)
REFERENCES tbl_autores

ALTER TABLE tbl_Livro
ADD ID_editora SMALLINT NOT NULL
CONSTRAINT fk_id_editora FOREIGN KEY (ID_editora)
REFERENCES tbl_editoras

------------------------------
 - ALTER TABLE - ALTER COLUMN
------------------------------

ALTER TABLE tbl_Livro 
ALTER COLUMN ID_Autor SMALLINT

------------------------
 - ALTER TABLE -ADD PK
------------------------

ALTER TABLE Clientes
ADD PRIMARY KEY (ID_Cliente)

OBS.: A coluna ID_Cliente deve existir antes de ser
transformada em chave primária.

A coluna ID_Cliente receberá a constraint "PRIMARY KEY",
e passará a ser chave primária da tabela.

------------------------------
 - DROP TABLE -Excluir tabela
------------------------------

 DROP TABLE nome_tabela

 DROP TABLE Clientes

------------------------------
 - INSERIR DADOS
------------------------------
 Inserir dados em uma tabela: 

INSERT INTO tabela (coluna1, coluna2,...)
VALUES(valor1, valor2,...)

-------------------------------------
 - INSERIR DADOS - Tabela de Autores
-------------------------------------

INSERT INTO tbl_Autores(ID_Autor, Nome_Autor, SobreNome_Autor)
VALUES (1, 'Daniel', 'Barret')

INSERT INTO tbl_Autores(ID_Autor, Nome_Autor, SobreNome_Autor)
VALUES (2, 'Gerald', 'Carter')

INSERT INTO tbl_Autores(ID_Autor, Nome_Autor, SobreNome_Autor)
VALUES(3, 'Mark', 'Sobell')

INSERT INTO tbl_Autores(ID_Autor, Nome_Autor, Sobrenome_Autor)
VALUES(4, 'William', 'Stanek')

INSERT INTO tbl_Autores(ID_Autor, Nome_Autor, SobreNome_Autor)
VALUES(5, 'Richard', 'Blum')

----------------------------------------
 - TRUNCATE TABLE
----------------------------------------

*Remove todas as linhas de uma tabela sem registrar as 
exclusões de linhas individuais.

*TRUNCATE TABLE é como a instrução DELETE sem usar a cláusula
WHERE.

*Entretanto, TRUNCATE TABLE é mais rápida e utiliza menos 
recursos de sistema e log de transações.

SELECT COUNT(*) AS Tabela_Antes FROM Clientes
GO

TRUNCATE TABLE Clientes
GO

SELECT COUNT (*) AS Tabela_Depois FROM Clientes
GO


================================================
	        SELECT FROM
================================================

------------------------------
    - Consulta Simples
------------------------------

 SELECT coluna FROM Tabela

Ex.:
SELECT Nome_Autor FROM tbl_Autores
SELECT * FROM tbl_Autores
SELECT Nome_Livro FROM tbl_Livro

-------------------------------
   - Especificando Colunas
-------------------------------
 
 SELECT colunas FROM tabela

Ex.: SELECT Nome_Livro, Id_Autor FROM tbl_Livro

SELECT Nome_Livro, ISBN
FROM tbl_Livro
ORDER BY Nome_Livro

============================================
	       - ORDER BY
============================================

* A palavra-chave ORDER BY é usada para ordenar
o conjunto resultado de registros.

* ASC - Ordem ascendente
* DESC - Ordem descendente (inversa)

 SELECT * FROM tbl_Livro
 ORDER BY Nome_Livro ASC

SELECT colunas FROM tabela
ORDER BY coluna_a_ordenar

EX.: 

SELECT * FROM tbl_Livro ORDER BY Nome_Livro
(ordem crescente)

SELECT * FROM tbl_Livro ORDER BY coluna DESC
(ordem decrescente)
------------------------------------------
DDL - Linguagem De Definicao de Dados
------------------------------------------
CREATE DATABASE - Criar um Banco
CREATE TABLE - Criar Tabelas
ALTER TABLE - Alterar Tabelas
TRUNCATE TABLE - Apagar dados da tabela
DROP TABLE - Apaga tabela

------------------------------------------
DML - Linguagem De Manipulação de Dados
------------------------------------------
INSERT - Incluir Dados
DELETE - Deleta os dados da coluna
UPDATE - Alterar dados

------------------------------------------
DQL - Linguagem De Consulta de Dados
------------------------------------------
São os comandos de consulta de dados
SELECT * FROM Table - Selecionar dados

------------------------------------------
           - SELECT DISTINCT
------------------------------------------
Algumas colunas podem conter valores duplicados.
Para exibir apenas valores diferentes ("distintos"),
use a palavra-chave DISTINCT:

SELECT DISTINCT colunas
FROM tabela

SELECT DISTINCT ID_Autor
FROM tbl_Livro


------------------------------------------
	   - CLÁUSULA WHERE
------------------------------------------
Permite filtrar registros em uma consulta

SELECT colunas FROM tabela WHERE coluna = valor

Ex.: SELECT * FROM tbl_Livro WHERE ID_Autor = '1'

SELECT ID_Autor FROM tbl_autores WHERE Sobrenome_Autor = 'Stanek'

-------------------------------------------
    	   - Operadores AND e OR
-------------------------------------------
*Usados para filtrar registros baseados em mais de 
uma condição;

*O operador AND mostra um registro se ambas as condições
forem verdadeiras;

*O operador OR mostra um registro se pelo menos uma das 
condições for verdadeira;

- Exemplo - Operadores AND e OR

 SELECT * FROM tbl_Livro
 WHERE ID_Livro > 2 AND ID_Autor < 3

 SELECT * FROM tbl_Livro
 WHERE ID_Livro > 2 OR ID_Autor < 3

---------------------------------------------
	    - Comando UPDATE
---------------------------------------------
UPDATE tabela
SET coluna = valor

UPDATE nome_tabela
SET coluna = valor
WHERE filtro 

UPDATE tbl_livros        --UPDATE nome_Tabela
SET Preco_Livro = 65.45  --SET trocar_preco da coluna Preco_Livro
wHERE ID_Livro = 102;	 --WHERE Localizar o valor 102 do ID_Livro

//Alterar mais de uma coluna
UPDATE tbl_livros
SET Preco_Livro = 80.00,
ISBN = '0202020'
WHERE ID_Livro = 101;

-----------------------------------------------
	     - SELECT TOP
-----------------------------------------------
*Usado para especificar o número de registros 
a retornar;

*Util para tabelas com muitos registros

SELECT TOP número|percentual colunas
FROM tabela

SELECT TOP 10 PERCENT Nome_Livro
FROM tbl_Livro

SELECT TOP 2 Nome_Livro
FROM tbl_Livro

------------------------------------------------
	      - SQL ALIAS
------------------------------------------------

Pode-se dar um nome diferente a uma coluna ou tabela
em uma consulta.

SELECT colunas
AS nome_alias
FROM tabela

SELECT Nome_Livro
AS Livro
FROM tbl_Livro

USE db_Biblioteca
SELECT Nome_Livro
AS Livro, ID_autor AS Autor
FROM tbl_Livro

-------------------------------------------------
	       - Operador UNION
-------------------------------------------------
  Permite combinar duas ou mais declarações SELECT.

  Cada declaração SELECT deve ter o mesmo número de 
colunas, tipos de dados e ordem das colunas

SELECT colunas FROM tabela1
UNION
SELECT colunas FROM tabela2

SELECT ID_Autor FROM tbl_autores UNION
SELECT ID_Autor FROM tbl_Livro

SELECT ID_Autor FROM tbl_autores
UNION ALL
SELECT ID_Autor FROM tbl_livro

--------------------------------------------------
		- SELECT INTO
--------------------------------------------------
 Seleciona dados de uma ou mais tabelas e os insere em
uma tabela diferente.

Pode ser usada para criar cópias de backup de tabelas

SELECT *
INT nova_tabela
FROM tabela_atual

SELECT Nome_Livro,ID_Autor
INTO LivroAutor
FROM tbl_Livro
WHERE ID_Livro > 2

----------------------------------------------------
		- Funções Agregadas
----------------------------------------------------

MIN - Valor Minimo
MAX - Valor Maximo
AVG - Media Aritmetica
SUM - Total (Soma)
COUNT - Contar quantidade de item

Exemplo:

SELECT COUNT(*) FROM tbl_autores

SELECT MAX (Preco_Livro) FROM tbl_Livro

SELECT MIN (Preco_Livro) FROM tbl_Livro

SELECT SUM (Preco_Livro) FROM tbl_Livro

-----------------------------------------------------
	    - BETWEEN - SELECAO DE INTERVALO
-----------------------------------------------------

SELECT colunas FROM tabela
WHERE coluna BETWEEN valor1 AND valor2

SELECT * FROM tbl_Livro
WHERE Data_Pub BETWEEN '20040517' AND '20100517'

SELECT Nome_Livro AS Livro, Preco_Livro AS Preco
FROM tbl_Livro
WHERE Preco_Livro BETWEEN 40.00 AND 60.00

----------------------------------------------------
		LIKE E NOT LIKE
----------------------------------------------------
*Determina se uma cadeia de caracteres especifica corresponde
a uma padrao especificado. Um padrao pode incluir caracteres
normais e curingas

*NOT LIKE inverte a comparação, verificando se a cadeia 
de caracteres NAO corresponde ao padrão especificado.

Usando junto com WHERE

Ex.:

WHERE coluna LIKE padrao

 LIKE - Padrões especificos

'%' - Qualquer cadeia de 0 ou mais caracteres

'_' - Sublinhado: qualquer caracter único

'[]' - Qualquer caracter único no intervalo ou conjunto
especificado ([a-h];[aeiou])

'[^]' - Qualquer caracter único que não esteja no intervalo
ou conjunto especificado ([a-h]; [aeiou])

-------------------------------------------------------
		       - JOINS
-------------------------------------------------------
A palavra-chave JOIN é usada para obter dados provenientes
de duas ou mais tabelas, baseado em um relacionamento entre 
colunas nestas tabelas.

 * INNER JOIN: Retorna linhas quando houver pelo menos uma
correspondencia em ambas as tabelas.

 * OUTER JOIN: Retorna linhas mesmo quando não houver pelo
menos uma correspondência em uma das tabelas (ou ambas). O
OUTER JOIN divide em LEFT JOIN, RIGHT JOIN e FULL JOIN.

SELECT colunas
FROM tabela1
INNER JOIN tabela2
ON tabela1.coluna = tabela2.coluna

Ex.:
SELECT * FROM tbl_Livro
INNER JOIN tbl_autores
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor

SELECT tbl_Livro.Nome_Livro,tbl_Livro.ISBN,
tbl_autores.Nome_Autor
FROM tbl_Livro
INNER JOIN tbl_autores
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor

Usando Aliases:
SELECT L.Nome_Livro, E.Nome_editora
FROM tbl_Livro AS L
INNER JOIN tbl_editoras AS E
ON L.ID_editora = E.ID_editora

===========================================================
		       OUTER JOINS
===========================================================

LEFT JOIN: Retorna todas as linhas da tabela à esquerda, 
mesmo se não houver nenhuma correspondencia na tabela à 
direita.

RIGHT JOIN: Retorna todas as linhas da tabela à direita, 
mesmo se não houver nenhuma correspondência na tabela à
esquerda.

FULL JOIN: Retorna linhas quando houver uma correspondencia
em qualquer uma das tabelas. É uma combinação de LEFT e 
RIGHTS JOINS.

 - LEFT JOIN

SELECT coluna
FROM tabela_esq
LEFT (OUTER) JOIN tabela_dir
ON tabela_esq.coluna = tabela_dir.coluna

EX.:
SELECT * FROM tbl_autores
LEFT JOIN tbl_Livro
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor

 - LEFT JOIN excluindo correspondencias

SELECT coluna
FROM tabela_esq
LEFT(OUTER) JOIN tabela_dir
ON tabela_esq.coluna = tabela_dir.coluna
WHERE tabela_dir.coluna IS NULL

SELECT * FROM tbl_autores
LEFT JOIN tbl_Livro
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor
WHERE tbl_Livro.ID_Autor IS NULL

 - RIGHT JOIN

SELECT colunas
FROM tabela_esq
RIGHT (OUTER)JOIN tabela_dir
ON tabela_esq.coluna = tabela_dir.coluna

EX.:
SELECT * FROM tbl_Livro AS Li
RIGHT JOIN tbl_editos AS Ed
ON Li.ID_editora = Ed.ID_editora

 - RIGHT JOIN excluindo correspondencias

SELECT coluna
FROM tabela_esq
RIGHT(OUTER) JOIN tabela_dir
ON tabela_esq.coluna = tabela_dir.coluna
WHERE tabela_esq.coluna IS NULL

SELECT * FROM tbl_Livro
RIGHT JOIN tbl_editoras
ON tbl_Livro.ID_editora = tbl_editoras.ID_editora
WHERE tbl_Livro.ID_editora IS NULL

====================================================
		     FULL JOIN
====================================================
Combinação de RIGHT JOIN com LEFT JOIN, retornando
registros que não possuam correspondências em ambas
as tabelas.

SELECT colunas
FROM tabela1
FULL (OUTER) JOIN tabela2
ON tabela1.coluna = tabela2.coluna

 - FULL JOIN exlcuindo correspondência

SELECT colunas
FROM tabela1
FULL (OUTER) JOIN tabela2
ON tabela1.coluna = tabela2.coluna
WHERE tabela1.coluna IS NULL
OR tabela2.coluna IS NULL

====================================================
	   IN: Filtro de Múltiplas Condições
====================================================
Determina se um determinado valor corresponde a qualquer
valor em uma sobconsulta ou lista.
Retorna sempre TRUE ou FALSE

Sintaxe:
Expressao_teste(NOT) IN (subconsulta | lista)

SELECT * FROM tbl_Livro
WHERE ID_Autor IN (1,2) //Só aparece IDs com valor - 1 e 2

SELECT * FROM tbl_Livro
WHERE ID_Autor NOT IN (1,2) //Não aparece Ids com valor - 1 e 2

====================================================
		CAMPOS CALCULADOS
====================================================

CREATE TABLE Produtos(
codProduto smallint,
NomeProduto varchar(20),
Preco money,
Quant smallint, 
Total AS (Preco * Quant)
);

INSERT INTO Produtos VALUES (1, 'Mouse', 15.00, 2);
INSERT INTO Produtos VALUES (2, 'Teclado', 18.00,1);
INSERT INTO Produtos VALUES (3, 'Fones', 25.00, 1);
INSERT INTO Produtos VALUES (4, 'PenDrive', 25.00, 3);
INSERT INTO Produtos VALUES (5, 'DVD-R', 1.30, 12);

=====================================================
		     CREATE INDEX
=====================================================

Permitem que as aplicações de BAncos de Dados encontrem
os dados mais rapidamente, sem ter de ler a tabela toda.

Os usuarios não vêem os índices

CREATE INDEX

Obs.: Apenas crie índices em tabelas que recebam muitas 
consultas; tabelas indexadas levam mais tempo para serem 
atualizadas

CREATE INDEX nome_indice
ON nome_tabela (nome_coluna)

======================================================
		    CREATE RULES
======================================================

---------------------
  - REGRAS
---------------------

As regras são configurações que permitem especificar como
determinados parâmetros do banco de dados devem se comportar,
como por exemplo, limitar faixas de valores em colunas, ou 
especificar valores inválidos para registros.

CREATE RULE nome_regra AS parametros

EXECUTE SP_BINDRULE rl_preco, 'tbl_Livro.Preco_Livro'

STORED PROCEDURE = PROCEDIMENTO ARMAZENADO

=======================================================
		BACKUP DO BANCO DE DADOS
=======================================================

Sintaxe: 

BACKUP DATABASE test
TO DISK = 'C:\arquivos\test.bak';
GO

BACKUP DATABASE test
TO DISK = 'C:\arquivos\test.bak';
WITH FORMAT;
GO

========================================================
		CONCATENAÇÃO DE STRINGS
========================================================

* É possivel concatenar strings usando-se o operador de 
concatenação ( + )

Sintaxe:

string1 | coluna + string2 | coluna

Exemplo:

SELECT 'Fabio' + 'Da Boson Treinamentos' AS 'Boson'

SELECT Nome_autor + '' + Sobrenome_autor AS 'Nome Completo' FROM tbl_autores

SELECT 'Eu gosto do Livro ' + Nome_Livro AS 'Meu Livro' FROM tbl_Livro
WHERE ID_Autor = 2

=========================================================
	Collation - Agrupamento de Caracteres ou Colação
=========================================================

Collation ("Colação" / "Agrupamento")

Trata-se da codificação dos caracteres em uma ordem numerica
ou alfabetica.
A colação usada pelos bancos de dados é configurada durante
a instalação do sistema.

-- Para ver as opções de agrupamento
SELECT * FROM fn_helpcollations

-- Para ver o esquema de colação usado atualmente
SELECT SERVERPROPERTY('Collation')

==========================================================
         	    CLÁUSULA WITH TIES
==========================================================

WITH TIES - Busca itens com o mesmo valor e mostra na tabela

SELECT TOP(3) WITH TIES NOME_TIME, Pontos
FROM tbl_times
ORDER BY Pontos DESC

===========================================================
			VIEWS
===========================================================

*Uma exibição(Views) é uma tabela virtual baseada no conjunto
de resultados de uma consulta SQL.

*Contém linhas e colunas como uma tabela real, e pode receber 
comandos como declarações JOIN, WHERE e funções como uma tabela
normal.

*Mostra sempre resultados de dados atualizados, pois o motor do
banco de dados recria os dados toda vez que um usuário consulta
a visão.

-------------------------------
       VIEWS - Criação
-------------------------------

Sintaxe: 

CREATE VIEW [Nome_Exibição]
AS SELECT colunas
FROM tabela
WHERE condições

CREATE VIEW vw_LivrosAutores
AS SELECT tbl_Livro.Nome_Livro AS Livro,
tbl_autores.Nome_Autor AS Autor
FROM tbl_Livro
INNER JOIN tbl_autores
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor

-------------------------------
   Usando a View Criada
-------------------------------

SELECT Livro, Autor
FROM vw_LivrosAutores

-------------------------------
     Views - Alteração
-------------------------------

ALTER VIEW vw_LivrosAutores AS
SELECT tbl_Livro.Nome_Livro AS Livro,tbl_autores.Nome_Autor
AS Autor, Preco_Livro AS Valor
FROM tbl_Livro
INNER JOIN tbl_autores
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor

USO: 

SELECT * FROM vw_LivrosAutores

-------------------------------
	VIEWS - Exclusão
-------------------------------

DROP VIEW nome_exibição

DROP vw_LivrosAutores

=================================================================
	SubConsultas (subqueries) com tabelas derivadas
=================================================================

Subconsultas

 Uma subconsulta (subquery) é declaração SQL embutida em uma consulta
externa.
A subconsulta fornece uma respota à consulta externa na forma de um
forma de um valor escalar, lista de valores, ou conjunto de dados,
equivalentes a uma expressão, lista ou tabela para a consulta eexterna.

Exemplo simples:

SELECT(SELECT 'Fabio') AS Subconsulta;

==================================================================
    CTE - Common Table Expression / Expressão de Tabela Comum
==================================================================

 Variação sintática de uma subconsulta, similar a uma exibição (view)
 Pode ser acessada múltiplas vezes dentro da consulta principal, como
 se fosse uma exibição ou tabela.

 USE db_Loja
 GO

 WITH ConsultaCTE (Cliente, Total)
 AS (SELECT CL.Nome_Cliente AS Cliente,
 PR.Preco_Produto * CO.Quantidade AS Total
 FROM Clientes AS CL 
 INNER JOIN Compras AS CO
 ON CL.ID_Cliente = CO.ID_CLiente
 INNER JOIN Produtos AS PR
 ON CO.ID_Produto = PR.ID_Produto)

 SELECT Cliente, SUM(Total) AS ValorTotal
 FROM ConsultaCTE
 GROUP BY Cliente
 ORDER BY ValorTotal

=====================================================================
			     VARIAVEIS
=====================================================================

 As variaveis podem ser declaradas no corpo de um batch ou procedimento.
Pode-se atribuir-lhes valores usando-se declarações SET ou SELECT.
 As variaveis são inicializadas por padrão com NULL.

--------------------------
Declaração de Variaveis
--------------------------

DECLARE @nome_var tipo

Ex.:

DECLARE  @valor INT,
 	 @texto VARCHAR(40),
	 @data_nasc DATE,
         @nada MONEY
	 @valor1, valor2, valor3 INT |--Variaveis do mesmo tipo

Obs.:
Usa-se a palavra DECLARE apenas uma vez para todas as variaveis 

--------------------------
Atribuir valores com SET 
--------------------------

SET nome_var = valor_var

Ex.:

SET @valor = 50
SET @texto = 'Boson'
SET @data_nasc = GETDATE()

----------------------------
Exibir os valores (consulta)
----------------------------

SELECT nomes_var AS aliases

SELECT  @valor AS Valor, 
	@texto AS Texto,
	@data_nasc AS 'Data de Nascimento',
	@nada AS Salario

----------------------------
Atribuir valor com SELECT
----------------------------

SELECT nome_Var = coluna FROM tabela
WHERE condicao
SELECT nome_var AS alias

Ex.:

DECLARE @livro VARCHAR(30)
SELECT @livro = nome_livro
FROM tbl_livro
WHERE ID_Livro = 101
SELECT @livro AS 'Nome do Livro'

---------------------
Exemplo com cálculo
---------------------

DECLARE @preco MONEY,
        @quantidade INT, 
	@nome VARCHAR(30)
	SET @quantidade = 5

SELECT @preco = Preco_Livro,
       @nome = Nome_Livro
FROM tbl_Livro
WHERE ID_Livro = 101

SELELCT @nome AS 'Nome do Livro'
@preco * @quantidade AS 'Preco dos Livros'

===========================================================================
          Conversão de Tipos de Dados no SQL (Cast e Convert)
===========================================================================

-------------------------
   Conversão de Dados
-------------------------

 Podemos converter expressões de um tipo de dados em outro no SQL usando
as funções:

 *CAST
 *CONVERT

------------------------
 CAST
------------------------

 CAST(expressao AS nobo_tipo_dados)

 Ex.:

 SELECT 'O preco do livro' + Nome_Livro + 'é de R$' + CAST(Preco_Livro AS VARHCAR(6)) AS Item FROM tbl_livro
 WHERE ID_autor = 2

-------------------------
 CONVERT
-------------------------

 CONVERT(novo_tipo_dados, expressao, estilo)

 estilo é usado normalmente para converter datas ou trabalhar com float/real.

 Ex.:
 
 SELECT 'O preco do livro' + Nome_Livro + ' é de R$' + CONVERT(VARCHAR(6), Preco_Livro)
 FROM tbl_livro

-----------------------------
  Outro exemplo com CONVERT
-----------------------------

 Trabalhando com datas- Quando a expressão é um tipo de data ou hora, o estilo
deve ser um valor de acordo com a tabela a seguir:

 Codigo do Estilo	Padrao			Representacao
 	101		 EUA			 mm/dd/aaaa
 	102		 ANSI			 aaaa.mm.dd
 	103	    	Britanico/Frances 	 dd/mm/aaaa
 	112		 ISO     		 aaaammdd
 	109		 Padrão			 mês dd aaaa

----------------------------
Exemplo de Data com CONVERT
----------------------------

Sem alterar estilo:
SELECT 'A data de publicação' + CONVERT(VARCHAR(15), Data_Pub)
FROM tbl_livro
WHERE ID_Livro = 102

Alterando estilo para Britanico/Frances(103):
SELECT 'A data de publicacao' + CONVERT(VARCHAR(15), Data_Pub, 103)
FROM tbl_livro
WHERE ID_Livro = 102

===============================================================
		     Condicional IF / ELSE
===============================================================

 É possivel realizar teste condicionais em declarações SQL usando-se
a estrutura IF / ELSE.

Extruturas:

IF Condicao		IF Condicao
  Declaracao		   Declaracao	
			ELSE
			   Declaracao 

 Nos exemplos anteriores, apenas uma de código é executada após os 
comandos IF e ELSE;
para executar blocos de código, use as palavras BEGIN e END:

 IF condicao
    BEGIN
	Bloco de códigos
    END;

Primeiro Exemplo:

DECLARE @numero INT,
        @texto VARCHAR(10)

SET @numero = 20
SET @texto = 'Fabio'

IF @numero = 20
	SELECT 'Numero correto!'
IF @texto = 'Fabio'
	BEGIN 
		SET @numero = 30
		SELECT @numero
	END;
ELSE
	BEGIN
		SET @numero = 40
		SELECT 'Numero incorreto!'
	END;

 Exemplo com Consulta:

 DECLARE @NOME VARCHAR(30),
	 @MEDIA REAL,
 	 @RESULTADO VARCHAR(10)
 SELECT
	@NOME = nome_aluno
	@MEDIA = (tbl_alunos.nota1 + tbl_alunos.nota2 + tbl_alunos.nota3 + tbl_alunos.nota4) / 4.00
 FROM tbl_alunos
 WHERE nome_aluno = 'Fabio'
	IF @MEDIA >= 7.00
	BEGIN
		SELECT @RESULTADO = 'Reprovado';
	END;

	SELECT 'O aluno ' + @NOME + 'está' + @RESULTADO +
		'com media ' + CAST(@MEDIA AS VARCHAR);

===========================================================================
			        LOOP WHILE
===========================================================================

 WHILE

 O comando WHile é usado para executar código enquanto uma condição for 
verdadeira.
 Ele executa apenas um comando, se for necessário executar um bloco de comandos,
use BEGIN/END.

 WHILE

 Sintaxe:

 WHILE condicao
    BEGIN
       Bloco de codigos
    END;

-----------------
 Exemplo While:
-----------------

DECLARE @valor INT
SET @valor = 0

WHILE @valor < 10
   BEGIN
       PRINT 'Número:'+CAST(@valor AS VARCHAR(2))
       SET  @valor = @valor + 1
   END;

============================================================================
				Stored Procedures
============================================================================

 Definição:

 São lotes (batches) de declarações SQL que podem ser executadas como uma 
subrotina.
 Permitem centralizar o lógica de acesso aos dados em um único local, facilitando
a manutenção e otimização de código.
 Também é possivel ajustar permissões de acesso aos usuários, definindo quem pode 
ou não executá-las.

----------------------------------
 Criar um Procedimento Armazenado
----------------------------------

 CREATE PROCEDURE nome_procedimento
    (@Parâmetro Tipo_dados)
 AS
   Bloco de codigos

-----------------
   Exemplo1
-----------------

 CREATE PROCEDURE teste
 AS
 SELECT 'Boson Treinamentos' AS Nome

Para executar:
EXEC(UTE) teste
obs. Se o procedimento armazenado for o primeiro comando de um batch, não é 
necessário usar a palavra EXEC

------------------
   Exemplo2
------------------

 CREATE PROCEDURES p_LivroValor
 AS
 SELECT Nome_Livro, Preco_livro
 FROM tbl_Livro

----------------------------
 Vizualizar conteúdo de SP
----------------------------

Use o procedimento armazenado sp_helptext para extrair o conteúdo de texto
de uma stored procedure:
 
 EXEC sp_helptext nome_procedimento

 Ex.:
 EXEC sp_helptext p_LivroValor

----------------------------------
 Criptografar Stored Procedure
----------------------------------

 CREATE PROCEDURE p_LivroISBN
 WITH ENCRYPTION
 AS 
 SELECT Nome_Livro, ISBN
 FROM tbl_Livro

 Agora tente visualizar seu conteúdo com sp_helptext:
 EXEC sp_helptext p_LivroISBN

==============================================================================
			  Modificar Stored Procedures
==============================================================================

 ALTER PROCEDURE
 
 ALTER PROCEDURE nome_procedimento
 bloco de códigos da sp

---------------------------
 Parâmetros de Entrada
---------------------------

 ALTER PROCEDURE teste(@parl AS int)
 AS
 SELECT @parl

 Executar passando um parâmetro:
 EXEC teste 22 --22 é o valor do parâmetro passado

-------------------------------------
Outro Exemplo com parâmetro de entrada
---------------------------------------

 ALTER PROCEDURE p_LivroValor
 (@ID SMALLINT)
 AS
 SELECT Nome_Livro as Livro, Preco_Livro AS Preco
 FROM tbl_Livro
 WHERE ID_Livro = @ID
 
 EXEC p_LivroValor 104

---------------------------------
Multiplos parâmetros de entrada
---------------------------------

 ALTER PROCEDURE teste(@parl AS int, @par2 AS varchar(20))
 AS 
 BEGIN
 SELECT @par1
 SELECT @par2
 END

 Executar passando um parâmetro:
 EXEC test 22, 'Laranja' --por posicao
 EXEC text @parl =25, @par2 = 'Abacate' --por nome

---------------------------------------------------
Outro exemplo com múltiplos parâmetros de entrada
---------------------------------------------------

 ALTER PROCEDURE p_LivroValor
 (@ID SMALLINT, @Preco MONEY)
 AS 
 SELECT Nome_Livro as Livro, Preco_Livro AS Preco
 FROM tbl_Livro
 WHERE ID_Livro > @ID AND Preco_Livro > @Preco

 Executar:
 EXEC p_LivroValor @ID = 103, @Preco = 60

--------------------------------------------------
Outro Exemplo com multiplos parametros de entrada
--------------------------------------------------

ALTER PROCEDURE p_LivroValor
(@ID SMALLINT, @Preco MONEY)
AS
SELECT Nome_Livro as Livro, Preco_Livro AS Preco
FROM tbl_Livro
WHERE ID_Livro > @ID AND Preco_Livro > @Preco

EXEC p_LivroValor @ID = 103, @Preco = 60

--------------------------------------------------
Outro exemplo - parametros
--------------------------------------------------

Desejo fornecer o ID e a quantidade de um titulo adquirido,
e saber o valor total pago pelos livros.

ALTER PROCEDURE p_LivroValor(
@Quantidade SMALLINT,
@ID SMALLINT)
AS 
SELECT Nome_Livro as Livro, Preco_Livro * @ Quantidade AS Preco
FROM tbl_Livro
WHERE ID_Livro = @ID

EXEC p_LivroValor @ID = 102, @Quantidade = 10

----------------------------------------
Exemplo - Insercao de dados
----------------------------------------

CREATE PROCCEDURE p_insere_editora(
@nome VARCHAR(50))
AS
INSERT INTO tbl_editoras(Nome_Editora)
VALUES(@nome)

--Execucao e verificacao:
EXEC p_insere_editora @nome = 'Editorial'
SELECT * FROM tbl_editoras

EXEC p_insere_editora @nome = 'Apress'